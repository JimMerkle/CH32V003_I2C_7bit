/********************************** (C) COPYRIGHT *******************************
 * File Name          : main.c
 * Author             : WCH
 * Version            : V1.0.0
 * Date               : 2022/08/08
 * Description        : Main program body.
 * Additional example code: https://github.com/CAPUF-Embedded/CH32V003-DEV-KIT-Firmware
 *******************************************************************************/

/*
 *@Note
 *7-bit addressing mode, master/slave mode, transceiver routine:
 *I2C1_SCL(PC2)\I2C1_SDA(PC1).
 *This routine demonstrates that Master sends and Slave receives.
 *Note: The two boards download the Master and Slave programs respectively,
 *    and power on at the same time.
 *      Hardware connection:
 *            PC2 -- PC2
 *            PC1 -- PC1
 *
 */

#include "debug.h"
#include <ch32v00x_i2c.h>

/* I2C Mode Definition */
#define HOST_MODE    0
#define SLAVE_MODE   1

/* I2C Communication Mode Selection */
#define I2C_MODE   HOST_MODE
//#define I2C_MODE   SLAVE_MODE

// The DS3231 real-time clock (RTC) module has I2C address of 0x68 (7-bit address)
#define DS3231_I2C_ADDRESS  0x68

/* Global define */
#define Size   6
#define I2C_SELF_ADDR   0x02  // my own address

/* Global Variable */
u8 TxData[Size] = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06 };
u8 RxData[Size];

/*********************************************************************
 * @fn      IIC_Init
 *
 * @brief   Initializes the IIC peripheral.
 * Default mapping for I2C signals: SCL:PC2, SDA:PC1
 * @return  none
 */
void IIC_Init(u32 bound, u16 address)
{
    GPIO_InitTypeDef GPIO_InitStructure={0};
    I2C_InitTypeDef I2C_InitTStructure={0};

    // Enable needed clocks to the peripheral
    RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOC | RCC_APB2Periph_AFIO, ENABLE );
    RCC_APB1PeriphClockCmd( RCC_APB1Periph_I2C1, ENABLE );

    // Configure PC2 (for SCL)
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_30MHz;
    GPIO_Init( GPIOC, &GPIO_InitStructure );

    // Configure PC1 (for SDA)
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_30MHz;
    GPIO_Init( GPIOC, &GPIO_InitStructure );

    I2C_InitTStructure.I2C_ClockSpeed = bound;
    I2C_InitTStructure.I2C_Mode = I2C_Mode_I2C;
    I2C_InitTStructure.I2C_DutyCycle = I2C_DutyCycle_16_9;
    I2C_InitTStructure.I2C_OwnAddress1 = address;
    I2C_InitTStructure.I2C_Ack = I2C_Ack_Enable;
    I2C_InitTStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
    I2C_Init( I2C1, &I2C_InitTStructure );

    I2C_Cmd( I2C1, ENABLE );

    //I2C_AcknowledgeConfig( I2C1, ENABLE ); // We want the I2C peripheral to acknowledge bytes when received
    // Reset the peripheral
    //I2C1->CTLR1 |= 0x8000; // set the SWRST bit (This was causing the PE bit to clear)
}

/*********************************************************************
 * @fn      TIM2_Init
 *
 * @brief   Initialize TIM2 for 1us continuous increment
 *
 * @return  none
 */
void TIM2_Init(void)
{
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
    TIM_TimeBaseInitTypeDef TIM_TimeBase = {
            .TIM_Prescaler = 47, // 48-1
            .TIM_CounterMode = TIM_CounterMode_Up,
            .TIM_Period = 0xFFFF,
            .TIM_ClockDivision = TIM_CKD_DIV1,
            .TIM_RepetitionCounter = 0x0000};
    TIM_TimeBaseInit(TIM2, &TIM_TimeBase);
    TIM_Cmd(TIM2, ENABLE);
}

/*********************************************************************
 * @fn      main
 *
 * @brief   Main program.
 *
 * @return  none
 */
int main(void)
{
//    u8 i=0;

    Delay_Init();
    //USART_Printf_Init(460800);
    USART_Printf_Init(115200);
    printf("SystemClk:%d\r\n",SystemCoreClock);
    printf("IIC Host mode\r\n");
    IIC_Init( 100000, I2C_SELF_ADDR); // request 100K I2C clock speed
    TIM2_Init(); // Init TIM2 for us time measurements

    Delay_Ms(5);
    printf("i2C_CTLR1: 0x%X\n",I2C1->CTLR1);
    printf("i2C_CTLR2: 0x%X\n",I2C1->CTLR2);

    TIM2->CNT = 0; // clear TIM2 counter
    while( I2C_GetFlagStatus( I2C1, I2C_FLAG_BUSY ) != RESET  && TIM2->CNT <= 2000 ); // Wait for I2C bus, not busy
    printf("i2C_STAR1: 0x%X\n",I2C1->STAR1);
    printf("i2C_STAR2: 0x%X\n",I2C1->STAR2);

    I2C_GenerateSTART( I2C1, ENABLE );
    printf("Start\n");

    TIM2->CNT = 0; // clear TIM2 counter
    while( !I2C_CheckEvent( I2C1, I2C_EVENT_MASTER_MODE_SELECT ) && TIM2->CNT <= 2000);

    if(TIM2->CNT > 2000) {
        printf("Time Out\n");
        printf("i2C_STAR1: 0x%X\n",I2C1->STAR1);
        printf("i2C_STAR2: 0x%X\n",I2C1->STAR2);
    }

    printf("Sending address\n");
    I2C_Send7bitAddress( I2C1, (DS3231_I2C_ADDRESS << 1), I2C_Direction_Receiver ); // send address (8-bit) with write:0 / read:1 bit set for read
    printf("waiting on send address\n");
    while( !I2C_CheckEvent( I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ) && !I2C_CheckEvent( I2C1, I2C_EVENT_SLAVE_ACK_FAILURE )) { // waits for TRA flag among others things
        printf("i2C_STAR1: 0x%X\n",I2C1->STAR1);
        printf("i2C_STAR2: 0x%X\n",I2C1->STAR2);
    }
    // The above displays:
    //waiting on send address
    //i2C_STAR1: 0x0
    //i2C_STAR2: 0x3
    //i2C_STAR1: 0x44
    //i2C_STAR2: 0x3

    if(I2C_CheckEvent( I2C1, I2C_EVENT_SLAVE_ACK_FAILURE ))
        printf("I2C ACK Failure\n");
    else
        printf("DS3231 present\n");

//  // Send six data bytes
//    while( i<6 )
//    {
//        if( I2C_GetFlagStatus( I2C1, I2C_FLAG_TXE ) !=  RESET )
//        {
//            I2C_SendData( I2C1, TxData[i] );
//            i++;
//        }
//    }

    while( !I2C_CheckEvent( I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ) );
    I2C_GenerateSTOP( I2C1, ENABLE );

    while(1);
}
